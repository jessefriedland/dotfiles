#!/bin/bash

DOTFILES_GIT_HOST=github.com
DOTFILES_GIT_URL="https://${DOTFILES_GIT_HOST}"
DOTFILES_GIT_ORG=jessefriedland
DOTFILES_GIT_REPO=dotfiles
DOTFILES_DIRECTORY="${HOME}/.${DOTFILES_GIT_REPO}"
DOTFILES_GIT_REMOTE="${DOTFILES_GIT_URL}/${DOTFILES_GIT_ORG}/${DOTFILES_GIT_REPO}"
DOTFILES_TARBALL_PATH="${DOTFILES_GIT_REMOTE}/archive/master.tar.gz"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
  printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
  mkdir ${DOTFILES_DIRECTORY}
  # Get the tarball
  curl -fsSLo ${HOME}/${DOTFILES_GIT_REPO}.tar.gz ${DOTFILES_TARBALL_PATH}
  # Extract to the dotfiles directory
  tar -zxf ${HOME}/${DOTFILES_GIT_REPO}.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
  # Remove the tarball
  rm -rf ${HOME}/${DOTFILES_GIT_REPO}.tar.gz
fi


cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help
  exit
fi

# Test for known flags
for opt in $@
do
  case $opt in
    --no-installs) no_installs=true ;;
    --no-applications) no_applications=true ;;
    --no-packages) no_packages=true ;;
    --no-sync) no_sync=true ;;
    --no-brew) no_brew=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

if [[ $no_brew ]]; then 
    printf "Skipped all brew related installs.\n"
else
  # Before relying on Homebrew, check that packages can be compiled
  check_xcode

  # Check for Homebrew
  if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # Check for git
  if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
  fi

  # Initialize the git repository if it's missing
  if [[ $no_sync ]]; then
    printf "Skipped initializing git repository\n"
  else
    if ! is_git_repo; then
      e_header "Initializing git repository..."
      git init
      git remote add origin ${DOTFILES_GIT_REMOTE}
      git fetch origin master
      # Reset the index and working tree to the fetched HEAD
      # (submodules are cloned in the subsequent sync step)
      git reset --hard FETCH_HEAD
      # Remove any untracked files
      git clean -fd
    fi
  fi

  # Conditionally sync with the remote repository
  if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
  else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
  fi

  if [[ $no_installs ]]; then
    printf "Skipped package and application installations.\n"
  else
    # Install and update packages
    if [[ $no_packages ]]; then
      printf "Skipped package installations.\n"
    else
      printf "Updating packages...\n"
      ./packages/Brewfile

      printf "Updating gems...\n"
      ./packages/Gemfile
    fi

    if [[ $no_applications ]]; then
      printf "Skipped application installations.\n"
    else
      printf "Updating applications...\n"
      ./applications/Caskfile
    fi
  fi
fi

link() {
  # Force create/replace the symlink.
  ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
  # Copy `.gitconfig`.
  # Any global git commands in `~/.bash_profile.local` will be written to
  # `.gitconfig`. This prevents them being committed to the repository.
  rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
  rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig.defaults  ${HOME}/.gitconfig.defaults
  # Force remove the vim directory if it's already there.
  if [ -e "${HOME}/.vim" ]; then
    rm -rf "${HOME}/.vim"
  fi

  # Create the necessary symbolic links between the `.dotfiles` and `HOME`
  # directory. The `bash_profile` sources other files directly from the
  # `.dotfiles` repository.
  link "shell/bashrc"       ".bashrc"
  link "shell/bash_profile" ".bash_profile"
  link "shell/curlrc"       ".curlrc"
  link "shell/inputrc"      ".inputrc"
  link "git/gitattributes"  ".gitattributes"
  link "git/gitignore"      ".gitignore"
  link "vim"                ".vim"
  link "vim/gvimrc"         ".gvimrc"
  link "vim/vimrc"          ".vimrc"
  link "shell/csshrc"      ".csshrc"

  for f in ~/.*; do
    if [[ $f == */.Linkfile.*local ]]; then
      printf "Linking local dotfile directories to HOME from ${f}...\n"
      $f
    fi
  done

  e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
  mirrorfiles
  source ${HOME}/.bash_profile
else
  printf "Aborting...\n"
  exit 1
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  bash ./bin/osxdefaults
  e_success "OS X settings updated! You may need to restart."
else
  printf "Skipped OS X settings update.\n"
fi
