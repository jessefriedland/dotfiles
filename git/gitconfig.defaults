[alias]
    # taken from https://gist.github.com/robmiller/6018582
    
    #
    # Working with Branches
    #
 
    # Get the current branch name (not so useful in itself, but used in other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Fire up your difftool (e.g. Kaleidescope) with all the changes that are on the current branch.
    code-review = difftool origin/master...

    # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
    # `git gc`: cleanup unnecessary files and optimize the local repository
    trim = !git remote prune origin && git gc

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    dm-br = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # opposite of above
    unassume = update-index --no-assume-unchanged
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    # Add untracked, remove deleted, and show status
    adda = !git add -A && git st

    # Fetch a repository ($1) and checkout its ref ($2) HEAD
    # Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
    browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

    # Diff what is staged for the next commit
    diffc = diff --cached
    # Diff overview
    diffst = diff --stat
    
    # merge tools
    ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # Custom graph log (append any tree-ish)
    graph = log --pretty=nice --date-order --graph
    # Custom graph log for all branches
    grapha = log --pretty=nice --date-order --graph --all

    # Custom pretty log
    logp = log --pretty=nice --date-order

    # Diffstat log
    logst = log --stat
    # Short format diffstat log
    logsf = log --stat --format=oneline --abbrev-commit

    # Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
    # Use: `git gh-pr 123` or `git gh-pr 123 upstream`
    gh-pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

    # Find out who is currently active on the repository
    # Displays committers in descending order of number of commits
    who = shortlog --numbered --summary --email --no-merges --since="3 months"

    # Search/grep codebase for string
    findf = grep -Ii
    # Search/grep codebase for string from root dir
    findfa = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

 	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  	snapshot = !git stash save "snapshot: $(date)$*" && git stash apply "stash@{0}"
  	snapshots = !git stash list --grep snapshot

  	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'


    # Basic commands shortened
    st = status -sb
    ci = commit -v
    br = branch -v
    co = checkout
    cp = cherry-pick -x
    cl = clone
    amend = commit --amend            # ammend your last commit
  	ammend = commit --amend           # ammend your last commit
  	cleanup = !git clean -fXd

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a -v
    remotes = remote -v

	# reset
  	unstage = reset HEAD              # remove files from index (tracking)
  	undo = reset $1 && checkout -- $1
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  	filelog = log -u                  # show changes to a file

    # delete tags
    delete-tags = !bash -c 'git tag -d $1 && git push origin :refs/tags/$1' -

    # Shows branches and their last commit date
    springcleaning = for-each-ref --sort=-committerdate --format='%(refname:short) %(committerdate:short)'
    
    # Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"


[color]
    # color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
    ui = auto
    interactive = auto
[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[credential]
    helper = osxkeychain

[difftool]
    prompt = false

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[mergetool]
  prompt = false
[merge]
  summary = true
  verbosity = 1
  tool = vimdiff
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[pull]
    default = current
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
